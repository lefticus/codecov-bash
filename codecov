#!/bin/bash

VERSION="0.0.5"

url="https://codecov.io"
verbose=0
env=""
token=""
slug=""
dump=0
files=0

set -e

show_help() {
cat << EOF
Codecov v$VERSION - Global Uploader
Usage: ${0##*/} [-hv] [-f COVERAGE]
Upload reports to Codecov

    -h           display this help and exit
    -f COVERAGE  reference a specific file only to upload
                 otherwise all files will be searched, recursively current directoy.
    -u URL       Set the target url for Enterprise customers [default https://codecov.io]
                 (or) set environment variable $CODECOV_URL=https://my-hosted-codecov.com
    -t TOKEN     Set the private repo token
                 (or) set environment variable $CODECOV_TOKEN=:uuid
    -e ENV       Specify environment variables to be included with this build
                 ex. codecov -e VAR,VAR2
                 (or) set environment variable $CODECOV_ENV=VAR,VAR2
    -r           owner/repo slug used instead of the private repo token in Enterprise
                 (or) set environment variable CODECOV_SLUG=:owner/:repo
                 ex. codecov -r mycompany/home
    -v           Verbose Mode
    -d           Dont upload and dump to stdin

Contribute and source at https://github.com/codecov/codecov-bash
EOF
}

say() {
  if [ $verbose != 0 ];
  then
    if [ "$1" = "-n" ]
    then
      echo -n "  $2"
    else
      echo "  $1"
    fi
  fi
}

urlencode() {
  python -c "import urllib as u; print u.quote_plus('$1')"
}

# detect bower comoponents location
bower_components="bower_components"
if [ -f .bowerrc ];
then
  bower_components=$(python -c "import json as j; print j.load(open('.bowerrc')).get('directory', 'bower_components')" | sed -e 's/^\///' | sed -e 's/\/$//')
fi

if [ $# != 0 ];
then
  while getopts "vdhu:t:f:r:e:" o
  do
    case "$o" in
      "v")
        verbose=1
        ;;
      "d")
        dump=1
        ;;
      "h")
        show_help
        exit 0;
        ;;
      "u")
        url=$(echo "$OPTARG" | sed -e 's/\/$//')
        ;;
      "t")
        token="&token=$OPTARG"
        ;;
      "f")
        files="$OPTARG"
        ;;
      "r")
        slug="&slug=$OPTARG"
        ;;
      "e")
        for e in $(echo "$OPTARG" | tr ',' ' ')
        do
          env="$env$e=$(eval echo "\$$e")
"
        done
        ;;
    esac
  done
fi

if [ "$CODECOV_URL" != "" ];
then
  url=$(echo "$CODECOV_URL" | sed -e 's/\/$//')
fi

if [ "$CODECOV_TOKEN" != "" ];
then
  token="&token=$CODECOV_TOKEN"
fi

if [ "$CODECOV_SLUG" != "" ];
then
  slug="&slug=$CODECOV_SLUG"
fi

echo "Codecov v$VERSION - Uploader"
say "url: $url"

if [ "$JENKINS_URL" != "" ];
then
  say "Jenkins CI detected."
  # https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project
  # https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin#GitHubpullrequestbuilderplugin-EnvironmentVariables
  build_url=$(urlencode "$BUILD_URL")
  _commit=$([ ! -z "$ghprbActualCommit" ] && echo "$ghprbActualCommit" || echo "$GIT_COMMIT")
  _branch=$([ ! -z "$ghprbSourceBranch" ] && echo "$ghprbSourceBranch" || echo "$GIT_BRANCH")
  query="service=jenkins\
         &branch=$_branch\
         &commit=$_commit\
         &build=$BUILD_NUMBER\
         &pr=$ghprbPullId\
         &build_url=$build_url"
  cd "$WORKSPACE"

elif [ "$CI" = "true" ] && [ "$TRAVIS" = "true" ];
then
  say "Travis CI detected."
  # http://docs.travis-ci.com/user/ci-environment/#Environment-variables
  query="service=travis-org\
         &branch=$TRAVIS_BRANCH\
         &commit=$TRAVIS_COMMIT\
         &build=$TRAVIS_JOB_NUMBER\
         &pull_request=$TRAVIS_PULL_REQUEST\
         &job=$TRAVIS_JOB_ID\
         &slug=$TRAVIS_REPO_SLUG"
  cd "$TRAVIS_BUILD_DIR"

elif [ "$CI" = "true" ] && [ "$CI_NAME" = "codeship" ];
then
  say "Codeship CI detected."
  # https://www.codeship.io/documentation/continuous-integration/set-environment-variables/
  build_url=$(urlencode "$CI_BUILD_URL")
  query="service=codeship\
         &branch=$CI_BRANCH\
         &build=$CI_BUILD_NUMBER\
         &build_url=$build_url\
         &commit=$CI_COMMIT_ID"

elif [ "$CI" = "true" ] && [ "$CIRCLECI" = "true" ];
then
  say "Circle CI detected."
  # https://circleci.com/docs/environment-variables
  query="service=circleci\
         &branch=$CIRCLE_BRANCH\
         &build=$CIRCLE_BUILD_NUM\
         &slug=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME\
         &commit=$CIRCLE_SHA1"

elif [ "$CI" = "true" ] && [ "$SEMAPHORE" = "true" ];
then
  say "Semaphore CI detected."
  # https://semaphoreapp.com/docs/available-environment-variables.html
  query="service=semaphore\
         &branch=$BRANCH_NAME\
         &build=$SEMAPHORE_BUILD_NUMBER\
         &slug=$SEMAPHORE_REPO_SLUG\
         &commit=$REVISION"

elif [ "$CI" = "true" ] && [ "$DRONE" = "true" ];
then
  say "Drone CI detected."
  # http://docs.drone.io/env.html
  build_url=$(urlencode "$DRONE_BUILD_URL")
  query="service=drone.io\
         &branch=$DRONE_BRANCH\
         &build=$DRONE_BUILD_NUMBER\
         &build_url=$build_url\
         &commit=$DRONE_COMMIT"

elif [ "$CI" = "True" ] && [ "$APPVEYOR" = "True" ];
then
  say "Appveyor CI detected."
  # http://www.appveyor.com/docs/environment-variables
  query="service=appveyor\
         &branch=$APPVEYOR_REPO_BRANCH\
         &build=$APPVEYOR_JOB_ID\
         &job=$APPVEYOR_BUILD_VERSION\
         &slug=$APPVEYOR_REPO_NAME\
         &commit=$APPVEYOR_REPO_COMMIT"

elif [ "$CI" = "True" ] && [ "$WERCKER_GIT_BRANCH" != "" ];
then
  say "Wercker CI detected."
  # http://devcenter.wercker.com/articles/steps/variables.html
  query="service=wercker\
         &branch=$WERCKER_GIT_BRANCH\
         &build=$WERCKER_MAIN_PIPELINE_STARTED\
         &slug=$WERCKER_GIT_OWNER/$WERCKER_GIT_REPOSITORY\
         &commit=$WERCKER_GIT_COMMIT"

elif [ "$CI" = "true" ] && [ "$MAGNUM" = "true" ];
then
  say "Magnum CI detected."
  # https://magnum-ci.com/docs/environment
  query="service=magnum\
         &branch=$CI_BRANCH\
         &build=$CI_BUILD_NUMBER\
         &commit=$CI_COMMIT"

elif [ "$CI" = "true" ] && [ "$SNAP_CI" = "true" ];
then
  say "Snap CI detected."
  # https://docs.snap-ci.com/environment-variables/
  query="service=snap\
         &branch=$SNAP_BRANCH\
         &build=$SNAP_PIPELINE_COUNTER\
         &pr=$SNAP_PULL_REQUEST_NUMBER\
         &commit=$SNAP_COMMIT"

elif [ "$SHIPPABLE" = "true" ];
then
  say "Shippable CI detected."
  # http://docs.shippable.com/en/latest/config.html#common-environment-variables
  _build_url=$(urlencode "$BUILD_URL")
  query="service=shippable\
         &branch=$BRANCH\
         &build=$BUILD_NUMBER\
         &build_url=$_build_url\
         &pull_request=$PULL_REQUEST\
         &slug=$REPO_NAME\
         &commit=$COMMIT"

elif [ "$CI_SERVER_NAME" = "GitLab CI" ];
then
  say "GitLab CI detected."
  # http://doc.gitlab.com/ci/examples/README.html#environmental-variables
  # https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/lib/build.rb#L96
  _slug=$(echo "$CI_BUILD_REPO" | cut -d'/' -f4-5 | sed -e 's/.git//')
  query="service=gitlab\
         &branch=$CI_BUILD_REF_NAME\
         &build=$CI_BUILD_ID\
         &slug=$_slug\
         &commit=$CI_BUILD_REF"
  cd "$CI_PROJECT_DIR"

else
  # find branch, commit, repo from git command
  say "No CI detected, using git for branch and commit sha."
  branch=$(git rev-parse --abbrev-ref HEAD)
  if [ "$branch" = "HEAD" ]; then branch="master"; fi;
  query="branch=$branch&commit=$(git rev-parse HEAD)"
fi;

# osx gcov
if [ -d ~/Library/Developer/Xcode/DerivedData ];
then
  find ~/Library/Developer/Xcode/DerivedData -name '*.gcda' | while read -r i
  do
      gcov "$i" &> /dev/null
  done
fi;

# all other gcov
find . -name '*.gcno' | while read -r i
do
    gcov "$i" &> /dev/null
done

# find all the reports
if [ $files != 0 ];
then
  say "Targeting specific file at $files"
else
  say -n "Searching for coverage reports..."
  files=$(find . -type f -name '*coverage.*' \
                     -or -name 'jacoco*.xml' \
                     -or -name 'clover.xml' \
                     -or -name 'report.xml' \
                     -or -name 'cobertura.xml' \
                     -or -name 'lcov.info' \
                     -or -name '*.lcov' \
                     -or -name 'gcov.info' \
                     -or -name '*.gcov' \
                     -or -name '*.lst' \
                    -not -path '*/vendor/*' \
                    -not -path '*/home/cainus/*' \
                    -not -path '*/venv/*' \
                    -not -path '*/.env/*' \
                    -not -path '*/virtualenv/*' \
                    -not -path '*/.virtualenv/*' \
                    -not -path '*/.git/*' \
                    -not -path '*/__pycache__/*' \
                    -not -path '*/.egg-info*' \
                    -not -path '*/node_modules/*')
  say "ok"
fi

# python coveragepy
if [ "$(which coverage >/dev/null 2>&1 | tr '\/' '\n' | tail -1)" = "coverage" ];
then
  say "coverage cli exists"
  if [ "$(echo "$files" | grep 'coverage.xml')" = "" ];
  then
    say "Trying (coverage xml)"
    # run python coverage
    if [ "$(coverage xml)" != "No data to report." ];
    then
      say "coverage.xml generated"
      files="$files
coverage.xml"
    else
      say "Python: coverage report could not be generated. No data to report."
    fi
  fi
fi

# no files found
if [ "$files" = "" ];
then
  say "No reports found."
  echo "No coverage report found."
  exit 1;
fi

say -n "Detecting file structure..."
upload=$(find . -type f \
                -not -path '*/venv/*' \
                -not -path '*/virtualenv/*' \
                -not -path '*/.env/*' \
                -not -path '*/.virtualenv/*' \
                -not -path '*/build/lib/*' \
                -not -path '*/.git/*' \
                -not -path '*/.egg-info/*' \
                -not -path '*/shunit2-2.1.6/*' \
                -not -path '*/vendor/*' \
                -not -path '*/__pycache__/*' \
                -not -path '*/node_modules/*' \
                -not -path "*/$bower_components/*" \
                -not -path '*/coverage/instrumented/*' \
                -not -name 'shunit2-2.1.6.tgz' \
                -not -name '*.gcov' \
                -not -name '.ruby-version' \
                -not -name '.gitignore' \
                -not -name '*.lcov' \
                -not -name '*.yml' \
                -not -name '*.txt' \
                -not -name '*.xml' \
                -not -name '*.json' \
                -not -name 'readme.md' \
                -not -name 'codecov' \
                -not -name '.DS_Store')
say "ok"

if [ -d "shunit2-2.1.6" ];
then
  # need to sort for testing purposes
  upload=$(echo "$upload" | sort)
fi

say -n "Reading reports..."
for file in $files
do
  # escape file paths
  file="$(echo $file | sed -e 's/ /\\ /')"
  # read the coverage file
  if [ -f "$file" ];
  then
    report=$(cat "$file")
    # append to to upload
    upload="$upload
<<<<<< EOF
$report"
  fi
done
say "ok"

if [ "$env" ] || [ "$CODECOV_ENV" ];
then
  for e in $(echo "$CODECOV_ENV" | tr ',' ' ')
  do
    env="$env$e=$(eval echo "\$$e")
"
  done
  say "Appending env variables"
  upload="$env<<<<<< ENV
$upload"
fi

# trim whitespace from query
query=$(echo "package=bash-v$VERSION&$query$slug$token" | tr -d ' ')
say "query: $query"

if [ $dump != 0 ];
then
  echo "$url/upload/v2?$query"
  echo "$upload"
else
  say "Uploading reports"
  res=$(echo "$upload" | \
            curl -X POST \
                 --silent \
                 --data-binary @- \
                 -H "Content-Type: text/plain" \
                 -H "Accept: text/plain" \
                 "$url/upload/v2?$query")
  echo "$res"
fi

# EOF
